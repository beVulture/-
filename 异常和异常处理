异常：在编码过程中会出现各种错误，针对错误，利用面向对象思想，抽取公共对象，形成异常对象
	Throwable 所有错误和异常的祖先，所有错误类和异常类都是继承Throwable
			  Throwable可抛出的，可以将错误信息，抛出给调用者
			  Exceotion 异常，由于某些不正常的操作，所引起的程序异常，可以通过某种方式解决，不影响程序的正常执行
					RuntimeException  运行时异常，程序没有正常执行之前不知道具体结果是否
					只有真正运行之后，才可以发现的异常
					
					编译时异常  不允许运行，代码写完就知道出现异常
			 Error 错误，系统发生的严重故障，导致程序崩溃，无法继续正常运行
	
	throw和throws
		（1）throw用在方法内，将异常Throwable对象，抛出给调用者
		（2）throws定义在方法声明中，告知调用者，可能未来可能会抛出这个异常给你
		（3）throws定义异常，抛不抛由自己决定，和异常类型无关
		（4）如果throws定义一个运行时异常，不强制要求进行异常处理
			 如果throws定义一个编译时异常，强制要求进行异常处理
		（1）如果需要解决问题，通常在main方法之前一定要解决掉，不然系统默认解决打印
			 
	自定义异常：开发者自己定义的异常
		（1）继承RuntimeException  自定义时，如果想要参数真正进入Throwable，必须显示的使用super'调用父类的有参构造
		（2）自定义编译时异常，继承Exception
		
	try关键字，用代码块将某一段代码进行异常捕获，捕获成功不会立即将产生的异常抛出给调用者，捕获失败依然会抛出异常
	catch关键字，匹配当前发生的异常类型，如果匹配成功，则执行catch中的方法
		catch中，根据可能存在的异常类型来进行匹配，得到一个异常对象
		规则，如果真实的异常类型等于catch中的异常类型，或者真实的异常类型是catch中的异常类型的子类，则匹配成功，匹配多个异常，使用多个catch
		当前异常满足多个异常匹配，从写法上，要把子类写在前面，父类写在后面
		从调用结果上说，如果前面的匹配成功，后面的不匹配
		如果多个异常执行同样的代码，可以用 | 进行连接多个异常
	finally关键字，代码块中的语句不管catch有没有匹配成功都执行，也不受return