集合类型：将具有相同数据类型的一组对象，放在一起，形成集合类型对象
	List（是一个接口）：列表（线性表） 将一组对象按照顺序排列
			ArrayList：（1）采用了数组的方式存储数据，
					   （2）创建一个空的数组，默认长度10
					   （3）因为采用了数组底层架构，在插入数据的时候会将目标位置一直到最后的所有数据一次往后移动，用来存放当前数据
					   （4）插入使用下标时，当前下标不能超过已经插入的对象个数，null也算插入一个空对象
					   （5）插入对象是，长度不够自动扩容
					   （6）删除一个元素，先找到目标位置，
				声明：ArrayList<String> lists=new ArrayList<String>();
					  ArrayList:声明当前数据类型为ArrayList
					  <String>：当前集合众可以存放的对象类型
					  lists：集合的变量名
					  =：赋值，将真实对象的引用地址给lists
					  new：创建一个真实的对象实例
					  ArrayList ：创建的真实对象的实例类型，可以和声明类型不一样，但必须存在可以使用的多态的前提
					  <String>:创建的真实对象的存放数据的类型，必须和前面声明的存放类型保持一致，通常该字段类型单词可以省略
					  （）：选择ArrayList哪一种构造方法，不写使用无参数的构造
				
				内部存储结构：
				
				增删改查：增：add（参数1，参数2）
							  参数1，将当前对象添加到哪一个下标位置，不写默认添加到最后位置
							  参数2，需要添加的对象
							  addAll（）对集合Collection及其子类进行批量添加，可以指定添加位置的下标，时期批量添加到指定位置
						  删：remove（）
							  给定一个要删除的下标，会删除指定下标位置的元素，返回值为已经被删除的对象
							  给定一个要删除的对象，先去找到集合中第一次出现的位置删除即可，后面的不考虑，返回值为false或true
							  removAll（）删除所有匹配到的集合，和顺序无关
						  改：set（参数1，参数2）修改参数1位置为对象参数2，返回值为修改之前的对象
						  查：get（参数） 返回参数下标位置的对象
							  contains（对象）  查看对象是否存在，返回true或false
							  containsAll（）批量查找，有一个对象没匹配到返回false
					
			LinkedList：实现了List接口，和ArrayList一样具备线性表的所有功能
						（1）LinkedList底层实是双向链表
				增删改查：增：add（）
							  如果没有给下标，默认将新添加的对象添加到双向链表最后
							  如果给定了下标，先找到目标位置，然后取消目标位置的双向链接，新建4条双向链接
						  删：remove（）
							  找到目标位置，删除目标位置前后4条链接，将目标位置的前一个和后一个节点直接链接起来
			使用场景，如果涉及到频繁的插入和删除操作，选择LinkedList
					  如果涉及到频繁查找的操作，使用ArrayList
					声明方式和ArrayList一样
	Set：数据集	将一组对象无序放在集合中
	Map：映射集	将两组对象的映射关系放在集合中
	